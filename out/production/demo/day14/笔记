8.23-Map:
HashMap：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。
LinkedHashMap：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；
                通过哈希表结构可以保证的键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。
tips：Map接口中的集合都有两个泛型变量,在使用时，要为两个泛型变量赋予数据类型。两个泛型变量的数据类型可以相同，也可以不同。

Map接口中定义了很多方法，常用的如下：
    public V put(K key, V value) : 把指定的键与指定的值添加到Map集合中。
    public V remove(Object key) : 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。
    public V get(Object key) 根据指定的键，在Map集合中获取对应的值。
    boolean containsKey(Object key) 判断集合中是否包含指定的键。
    public Set<K> keySet() : 获取Map集合中所有的键，存储到Set集合中。
    public Set<Map.Entry<K,V>> entrySet() : 获取到Map集合中所有的键值对对象的集合(Set集合)。
tips:
    使用put方法时，若指定的键(key)在集合中没有，则没有这个键对应的值，返回null，并把指定的键值添加到集合中；
    若指定的键(key)在集合中存在，则返回值为集合中键对应的值（该值为替换前的值），并把指定键所对应的值，替换成指定的新值。

Map集合遍历键找值方式
    键找值方式：即通过元素中的键，获取键所对应的值
    分析步骤：
    1. 获取Map中所有的键，由于键是唯一的，所以返回一个Set集合存储所有的键。方法提示: keyset()
    2. 遍历键的Set集合，得到每一个键。
    3. 根据键，获取键所对应的值。方法提示: get(K key)

Map 中存放的是两种对象，一种称为key(键)，一种称为value(值)，它们在在 Map 中是一一对应关系，这一对对象又称做 Map 中的一个 Entry(项) 。
Entry 将键值对的对应关系封装成了对象。即键值对对象，这样我们在遍历 Map 集合时，就可以从每一个键值对（ Entry ）对象中获取对应的键与对应的值。
既然Entry表示了一对键和值，那么也同样提供了获取对应键和对应值得方法：
    public K getKey() ：获取Entry对象中的键。
    public V getValue() ：获取Entry对象中的值。
在Map集合中也提供了获取所有Entry对象的方法：
    public Set<Map.Entry<K,V>> entrySet() : 获取到Map集合中所有的键值对对象的集合(Set集合)。

tips：Map集合不能直接使用迭代器或者foreach进行遍历。但是转成Set之后就可以使用了。
Map集合遍历键值对方式
    键值对方式：即通过集合中每个键值对(Entry)对象，获取键值对(Entry)对象中的键与值。
操作步骤与图解：
1. 获取Map集合中，所有的键值对(Entry)对象，以Set集合形式返回。方法提示: entrySet() 。
2. 遍历包含键值对(Entry)对象的Set集合，得到每一个键值对(Entry)对象。
3. 通过键值对(Entry)对象，获取Entry对象中的键与值。 方法提示: getkey() getValue()


2.23-异常：
异常 ：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。
在Java等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。Java处理异常的方式是中断处理。
异常指的并不是语法错误,语法错了,编译不通过,不会产生字节码文件,根本不能运行.

异常体系
异常机制其实是帮助我们找到程序中的问题，异常的根类是 java.lang.Throwable ，其下有两个子类：
java.lang.Error 与 java.lang.Exception ，平常所说的异常指 java.lang.Exception 。

Throwable中的常用方法：
    public void printStackTrace() :打印异常的详细信息。
        包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。
    public String getMessage() :获取发生异常的原因。
        提示给用户的时候,就提示错误原因。
    public String toString() :获取异常的类型和异常描述信息(不用)。

异常(Exception)的分类:根据在编译时期还是运行时期去检查异常?
编译时期异常:checked异常。在编译时期,就会检查,如果没有处理异常,则编译失败。(如日期格式化异常)
运行时期异常:runtime异常。在运行时期,检查异常.在编译时期,运行异常不会编译器检测(不报错)。(如数学异常)

8.23-异常处理：
Java异常处理的五个关键字：try、catch、finally、throw、throws

throw用在方法内，用来抛出一个异常对象，将这个异常对象传递到调用者处，并结束当前方法的执行。
    格式：throw new 异常类名(参数);

Objects非空判断
public static <T> T requireNonNull(T obj) :查看指定引用对象不是null。

声明异常：将问题标识出来，报告给调用者。如果方法内通过throw抛出了编译时异常，而没有捕获处理，那么必须通过throws进行声明，让调用者去处理。
关键字throws运用于方法声明之上,用于表示当前方法不处理异常,而是提醒该方法的调用者来处理异常(抛出异常).
声明异常格式：
    修饰符 返回值类型 方法名(参数) throws 异常类名1,异常类名2…{ }

如果异常出现的话,会立刻终止程序,所以我们得处理异常:
1. 该方法不处理,而是声明抛出,由该方法的调用者来处理(throws)。
2. 在方法中使用try-catch的语句块来处理异常。
try-catch的方式就是捕获异常。
捕获异常：Java中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理。
    try{
    编写可能会出现异常的代码
    }catch(异常类型 e){
    处理异常的代码
    //记录日志/打印异常信息/继续抛出异常
    }
try：该代码块中编写可能产生异常的代码。
catch：用来进行某种异常的捕获，实现对捕获到的异常进行处理。
(注意:try和catch都不能单独使用,必须连用。)

如何获取异常信息：
Throwable类中定义了一些查看方法:
public String getMessage() :获取异常的描述信息,原因(提示给用户的时候,就提示错误原因。
public String toString() :获取异常的类型和异常描述信息(不用)。
public void printStackTrace() :打印异常的跟踪栈信息并输出到控制台。

finally：有一些特定的代码无论异常是否发生，都需要执行。另外，因为异常会引发程序跳转，导致有些语句执行不到。而finally就是解决这个问题的，在finally代码块中存放的代码都是一定会被执行的。
只有前面运行（System.exit()）关掉JVM虚拟机才能终止finally语句运行;finally是在try和catch之前执行的，优先执行；
(什么时候的代码必须最终执行？
 当我们在try语句块中打开了一些物理资源(磁盘文件/网络连接/数据库连接等),我们都得在使用完之后,最终关闭打开的资源。
)

finally的语法:
try...catch....finally:自身需要处理异常,最终还得关闭资源。
注意:finally不能单独使用。

多个异常使用捕获又该如何处理呢？
1. 多个异常分别处理。
2. 多个异常一次捕获，多次处理。
3. 多个异常一次捕获一次处理。
一般我们是使用一次捕获多次处理方式，格式如下：
    try{
    编写可能会出现异常的代码(一般不会发生异常的代码不能放到try里面)
    }catch(异常类型A e){ 当try中出现A类型异常,就用该catch来捕获.
    处理异常的代码
    //记录日志/打印异常信息/继续抛出异常
    }catch(异常类型B e){ 当try中出现B类型异常,就用该catch来捕获.
    处理异常的代码
    //记录日志/打印异常信息/继续抛出异常
    }
注意:这种异常处理方式，要求多个catch中的异常不能相同，并且若catch中的多个异常之间有子父类异常的关系，那么子类异常要求在上面的catch处理，父类异常在下面的catch处理。

运行时异常被抛出可以不处理。即不捕获也不声明抛出。
如果finally有return语句,永远返回finally中的结果,避免该情况.
如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常。
父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出

什么是自定义异常类:
在开发中根据自己业务的异常情况来定义异常类.
自定义一个业务逻辑异常: RegisterException。一个注册异常类。

异常类如何定义:
1. 自定义一个编译期异常: 自定义类 并继承于 java.lang.Exception 。
2. 自定义一个运行时期的异常类:自定义类 并继承于 java.lang.RuntimeException 。


运行时异常类型：
1、ArithmeticException - 算术运算中，被0除或模除bai。
2、ArrayIndexOutOfBoundsException - 数组越du界访问。
3、ArrayStoreException - 数据存储zhi异常，写数组操作时，对象或数据类型不兼容dao。
4、ClassCastException - 类型转换异常。
5、IllegalArgumentException - 方法的参数无效。
6、IllegalThreadStateException - 试图非法改变线程状态，比方说试图启动一已经运行的线程。
7、NullPointerException - 试图访问一空对象的变量、方法或空数组的元素
8、NumberFormatException - 数据格式异常，试图把一字符串非法转换成数值（或相反）。
9、SecurityException - 如果Applet试图执行一被WWW浏览器安全设置所禁止的操作。
10、IncompatibleClassChangeException - 如改变了某一类定义，却没有重新编译其他引用了这个类的对象。如某一成员变量的声明被从静态改变为非静态，但其他引用了这个变量的类却没有重新编译，或者相反。
11、OutOfMemoryException - 内存不足，通常发生于创建对象之时。
12、NoClassDefFoundException - JAVA运行时系统找不到所引用的类。
13、IncompatibleTypeException - 试图实例化一个接口，Java运行时系统将抛出这个异常。
14、UnsatisfiedLinkException - 如果所需调用的方法是C函数，但Java运行时系统却无法连接这个函数。
15、InternalException - 系统内部故障所导致的异常情况，可能是因为Java运行时系统本身的原因。如果发现一可重现的InternalException，可以直接给Sun公司发电邮java@java.Sun.com。